!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n.r(t);var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,o;return t=e,(n=[{key:"dictate",value:function(){}},{key:"result",value:function(){}}])&&r(t.prototype,n),o&&r(t,o),e}();function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._recognition=null,this._initialize(t)}var t,n,r;return t=e,(n=[{key:"_initialize",value:function(e){window.SpeechRecognition=window.webkitSpeechRecognition||window.SpeechRecognition,this._recognition=new SpeechRecognition,this._recognition.language=e.lang?e.lang:void 0,this._recognition.maxAlternatives=e.maxAlternatives?e.maxAlternatives:1}},{key:"dictate",value:function(){this._recognition.start()}},{key:"result",value:function(){var e=this;return new Promise(function(t){e._recognition.onresult=function(e){var n=e.results[0][0].transcript;e.results[0].isFinal&&t(n)}})}},{key:"stop",value:function(){this._recognition.stop()}}])&&i(t.prototype,n),r&&i(t,r),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._speechApi=null,this._setApi(t)}var t,n,r;return t=e,(n=[{key:"_setApi",value:function(e){if(e.W3C)this._speechApi=new u(e.W3C);else{if(!e.GoogleCloudApi)throw new Error("Is not set any global.speechApi configuration");this._speechApi=new o(e.GoogleCloudApi)}}},{key:"dictate",value:function(){this._speechApi.dictate()}},{key:"result",value:function(){return this._speechApi.result()}},{key:"stop",value:function(){this._speechApi.stop()}}])&&a(t.prototype,n),r&&a(t,r),e}();function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._parentNode=parent,this._parentKey=t,this._children={},this.data=null,this.isEndOfWord=!1,this.word=null}var t,n,r;return t=e,(n=[{key:"update",value:function(e){this.isEndOfWord=!!e,this.data=e,this.isEndOfWord||(this.word=null)}},{key:"hasChildren",value:function(){return Object.keys(this._children).length>0}},{key:"deleteChild",value:function(e){this.children[e].update(null),this.children[e]._parentNode=null,this.children[e]._parentKey=null,this.children[e].word=null,delete this._children[e]}},{key:"addChild",value:function(e,t){this._children[e]=t}},{key:"hasChild",value:function(e){return!!this._children[e]}},{key:"parent",get:function(){return{key:this._parentKey,node:this._parentNode}}},{key:"children",get:function(){return this._children}}])&&l(t.prototype,n),r&&l(t,r),e}();function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._root=new s,this._lastIndex=1}var t,n,r;return t=e,(n=[{key:"insert",value:function(e,t){return this._insertWord(e,t,this._root,0)}},{key:"_insertWord",value:function(e,t,n,r){if(r===e.length)return n.word=e,n.update(t||this._getNextIndex()),!0;var o=e.charAt(r);return n.hasChild(o)||n.addChild(o,new s(n,o)),this._insertWord(e,t,n.children[o],r+1)}},{key:"search",value:function(e){var t=this._searchNode(e,this._root,0);return t?t.data:null}},{key:"_searchNode",value:function(e,t,n){if(n===e.length)return t.isEndOfWord?t:null;var r=e.charAt(n);return t.hasChild(r)?this._searchNode(e,t.children[r],n+1):null}},{key:"delete",value:function(e){var t=this._searchNode(e,this._root,0);return!!t&&(t.hasChildren()?(t.update(null),!0):(this._deleteWord(t),!0))}},{key:"_deleteWord",value:function(e){if(e!==this._root){var t=e.parent;t.node.deleteChild(t.key),t.node.hasChildren()||this._deleteWord(t.node)}}},{key:"update",value:function(e,t){var n=this._searchNode(e,this._root,0);return!!n&&(n.update(t),!0)}},{key:"getDataNode",value:function(e){return this._searchNode(e,this._root,0)}},{key:"getPath",value:function(e){var t=[];t.push(this._root);for(var n=1;n<=e.length;n++)t.push(this._searchNode(e.substring(0,n),this._root,0));return t}},{key:"_getNextIndex",value:function(){return this._lastIndex++}},{key:"root",get:function(){return this._root}}])&&f(t.prototype,n),r&&f(t,r),e}();function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.querySelector=t,this.domElement=this._setDomElement(t),this.phrases=this._setPhrases(n),this.event=n.actions,this.listener=n.listener}var t,n,r;return t=e,(n=[{key:"_setDomElement",value:function(e){var t=document.querySelector(e);if(t)return t;throw new Error("VCL >> Element "+e+" not found on the page.")}},{key:"_setPhrases",value:function(e){if(e.phrases instanceof Array)return this._simplify(e.phrases);throw new Error("VCL >> phrases for "+this.querySelector+" is not configured.")}},{key:"_simplify",value:function(e){var t=e.map(function(e){return e.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()});return Array.prototype.push.apply(e,t),e}}])&&p(t.prototype,n),r&&p(t,r),e}();function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var g=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._controlObjects={},this._trie=new h,this.divideControlObjects(t)}var t,n,r;return t=e,(n=[{key:"_unsetGlobalConfig",value:function(e){return e.global?function(e){e.global;return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){v(e,t,n[t])})}return e}({},d(e,["global"]))}(e):e}},{key:"divideControlObjects",value:function(e){var t=this;Object.keys(this._unsetGlobalConfig(e)).forEach(function(n){t._controlObjects[n]=new y(n,e[n]),t._controlObjects[n].phrases.forEach(function(e){return t._trie.insert(e,n)})})}},{key:"trie",get:function(){return this._trie}},{key:"controlObjects",get:function(){return this._controlObjects}}])&&b(t.prototype,n),r&&b(t,r),e}();function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var w=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._recognizeResult=t,this._controlObject=n}var t,n,r;return t=e,(n=[{key:"actions",get:function(){return this._controlObject.event}},{key:"phrases",get:function(){return this._controlObject.phrases}},{key:"element",get:function(){return this._controlObject.domElement}},{key:"result",get:function(){return this._recognizeResult}},{key:"listener",get:function(){return this._controlObject.listener}}])&&_(t.prototype,n),r&&_(t,r),e}();function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var k=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"run",value:function(e,t){var n=new w(e,t);this.executeListener(n),this.executeEvents(n)}},{key:"_invoke",value:function(e,t){if(!("on"+e in t.element))throw new Error("VCL >> actions."+e+" event is not supported on element.");t.element.dispatchEvent(new Event(e,{bubbles:!0,cancelable:!1}))}},{key:"_performFunction",value:function(e,t,n){if("boolean"==typeof t)return t;if("function"==typeof t)return t(n);throw new Error("VCL >> actions."+e+" type of value is not recognized.")}},{key:"executeEvents",value:function(e){var t=this;Object.keys(e.actions).forEach(function(n){var r=t._performFunction(n,e.actions[n],e);if(r)t._invoke(n,e);else if("undefined"===r)throw new Error("VCL >> actions."+n+" value must return true or false.")})}},{key:"executeListener",value:function(e){if(e.listener){if("function"!=typeof e.listener)throw new Error("VCL >> type of listener value must be a function.");e.listener(e)}}}])&&m(t.prototype,n),r&&m(t,r),e}();function O(e){return(O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._speechApi=new c(this._setApiConfig(t)),this._serviceObjects=new g(this._setServiceObjectsConfig(t)),this._runner=new k,this._logging=t.global.speechApi.debug,window.addEventListener("keydown",function(e){e.ctrlKey&&e.shiftKey&&"V"===e.key&&n.execute()})}var t,n,r;return t=e,(n=[{key:"_setApiConfig",value:function(e){if("object"===O(e)&&e.global&&e.global.speechApi)return e.global.speechApi;throw new Error("VCL >> global.speechApi is not configured.")}},{key:"_setServiceObjectsConfig",value:function(e){if("object"===O(e))return e;throw new Error("VCL >> No element configured for voice control.")}},{key:"execute",value:function(){var e=this;this._speechApi.dictate(),this._speechApi.result().then(function(t){e._logging&&console.log("VCL >> Recognize result : "+t);var n=e._searchSelector(t);if(!n)throw new Error("VCL >> Voice command does not match any phrase for the voice control element");e._runner.run(t,e._serviceObjects.controlObjects[n]),e._speechApi.stop()})}},{key:"_searchSelector",value:function(e){var t=this,n=void 0;if([function(e){return e},function(e){return e.toLowerCase()},function(e){return e.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()}].some(function(r){var o=t._serviceObjects.trie.search(r(e));return!!o&&(n=o,!0)}),null!=n)return n}}])&&j(t.prototype,n),r&&j(t,r),e}();n.d(t,"VCL",function(){return C})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,